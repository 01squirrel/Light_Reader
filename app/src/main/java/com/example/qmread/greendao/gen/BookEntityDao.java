package com.example.qmread.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.qmread.bean.BookEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_ENTITY".
*/
public class BookEntityDao extends AbstractDao<BookEntity, Long> {

    public static final String TABLENAME = "BOOK_ENTITY";

    /**
     * Properties of entity BookEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NovelUrl = new Property(1, String.class, "novelUrl", false, "NOVEL_URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Cover = new Property(3, String.class, "cover", false, "COVER");
        public final static Property ChapterNum = new Property(4, int.class, "chapterNum", false, "CHAPTER_NUM");
        public final static Property ChapterIndex = new Property(5, int.class, "chapterIndex", false, "CHAPTER_INDEX");
        public final static Property Position = new Property(6, int.class, "position", false, "POSITION");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property SecondPosition = new Property(8, int.class, "secondPosition", false, "SECOND_POSITION");
    }

    private DaoSession daoSession;


    public BookEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOVEL_URL\" TEXT," + // 1: novelUrl
                "\"NAME\" TEXT," + // 2: name
                "\"COVER\" TEXT," + // 3: cover
                "\"CHAPTER_NUM\" INTEGER NOT NULL ," + // 4: chapterNum
                "\"CHAPTER_INDEX\" INTEGER NOT NULL ," + // 5: chapterIndex
                "\"POSITION\" INTEGER NOT NULL ," + // 6: position
                "\"TYPE\" TEXT," + // 7: type
                "\"SECOND_POSITION\" INTEGER NOT NULL );"); // 8: secondPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String novelUrl = entity.getNovelUrl();
        if (novelUrl != null) {
            stmt.bindString(2, novelUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }
        stmt.bindLong(5, entity.getChapterNum());
        stmt.bindLong(6, entity.getChapterIndex());
        stmt.bindLong(7, entity.getPosition());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
        stmt.bindLong(9, entity.getSecondPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String novelUrl = entity.getNovelUrl();
        if (novelUrl != null) {
            stmt.bindString(2, novelUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }
        stmt.bindLong(5, entity.getChapterNum());
        stmt.bindLong(6, entity.getChapterIndex());
        stmt.bindLong(7, entity.getPosition());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
        stmt.bindLong(9, entity.getSecondPosition());
    }

    @Override
    protected final void attachEntity(BookEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookEntity readEntity(Cursor cursor, int offset) {
        BookEntity entity = new BookEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // novelUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cover
            cursor.getInt(offset + 4), // chapterNum
            cursor.getInt(offset + 5), // chapterIndex
            cursor.getInt(offset + 6), // position
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.getInt(offset + 8) // secondPosition
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNovelUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCover(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterNum(cursor.getInt(offset + 4));
        entity.setChapterIndex(cursor.getInt(offset + 5));
        entity.setPosition(cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSecondPosition(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
