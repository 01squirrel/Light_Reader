package com.example.qmread.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.qmread.bean.BookEntity;

import com.example.qmread.bean.ChapterEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_ENTITY".
*/
public class ChapterEntityDao extends AbstractDao<ChapterEntity, Long> {

    public static final String TABLENAME = "CHAPTER_ENTITY";

    /**
     * Properties of entity ChapterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChapterId = new Property(0, long.class, "chapterId", true, "_id");
        public final static Property ChapterName = new Property(1, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property UpdateTime = new Property(2, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property TotalWords = new Property(3, Integer.class, "totalWords", false, "TOTAL_WORDS");
        public final static Property TotalComments = new Property(4, Integer.class, "totalComments", false, "TOTAL_COMMENTS");
        public final static Property Bookmarks = new Property(5, Integer.class, "bookmarks", false, "BOOKMARKS");
    }

    private DaoSession daoSession;

    private Query<ChapterEntity> bookEntity_ChaptersQuery;

    public ChapterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: chapterId
                "\"CHAPTER_NAME\" TEXT," + // 1: chapterName
                "\"UPDATE_TIME\" INTEGER," + // 2: updateTime
                "\"TOTAL_WORDS\" INTEGER," + // 3: totalWords
                "\"TOTAL_COMMENTS\" INTEGER," + // 4: totalComments
                "\"BOOKMARKS\" INTEGER);"); // 5: bookmarks
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHAPTER_ENTITY__id ON \"CHAPTER_ENTITY\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChapterEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getChapterId());
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(2, chapterName);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(3, updateTime.getTime());
        }
 
        Integer totalWords = entity.getTotalWords();
        if (totalWords != null) {
            stmt.bindLong(4, totalWords);
        }
 
        Integer totalComments = entity.getTotalComments();
        if (totalComments != null) {
            stmt.bindLong(5, totalComments);
        }
 
        Integer bookmarks = entity.getBookmarks();
        if (bookmarks != null) {
            stmt.bindLong(6, bookmarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChapterEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getChapterId());
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(2, chapterName);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(3, updateTime.getTime());
        }
 
        Integer totalWords = entity.getTotalWords();
        if (totalWords != null) {
            stmt.bindLong(4, totalWords);
        }
 
        Integer totalComments = entity.getTotalComments();
        if (totalComments != null) {
            stmt.bindLong(5, totalComments);
        }
 
        Integer bookmarks = entity.getBookmarks();
        if (bookmarks != null) {
            stmt.bindLong(6, bookmarks);
        }
    }

    @Override
    protected final void attachEntity(ChapterEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChapterEntity readEntity(Cursor cursor, int offset) {
        ChapterEntity entity = new ChapterEntity( //
            cursor.getLong(offset + 0), // chapterId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chapterName
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // updateTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // totalWords
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // totalComments
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // bookmarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChapterEntity entity, int offset) {
        entity.setChapterId(cursor.getLong(offset + 0));
        entity.setChapterName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdateTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTotalWords(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTotalComments(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBookmarks(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChapterEntity entity, long rowId) {
        entity.setChapterId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChapterEntity entity) {
        if(entity != null) {
            return entity.getChapterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChapterEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chapters" to-many relationship of BookEntity. */
    public List<ChapterEntity> _queryBookEntity_Chapters(long chapterId) {
        synchronized (this) {
            if (bookEntity_ChaptersQuery == null) {
                QueryBuilder<ChapterEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChapterId.eq(null));
                bookEntity_ChaptersQuery = queryBuilder.build();
            }
        }
        Query<ChapterEntity> query = bookEntity_ChaptersQuery.forCurrentThread();
        query.setParameter(0, chapterId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBookEntityDao().getAllColumns());
            builder.append(" FROM CHAPTER_ENTITY T");
            builder.append(" LEFT JOIN BOOK_ENTITY T0 ON T.\"_id\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ChapterEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ChapterEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BookEntity bookEntity = loadCurrentOther(daoSession.getBookEntityDao(), cursor, offset);
         if(bookEntity != null) {
            entity.setBookEntity(bookEntity);
        }

        return entity;    
    }

    public ChapterEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ChapterEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ChapterEntity> list = new ArrayList<ChapterEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ChapterEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ChapterEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
