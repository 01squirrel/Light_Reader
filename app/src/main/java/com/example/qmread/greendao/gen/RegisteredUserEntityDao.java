package com.example.qmread.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.qmread.bean.RegisteredUserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGISTERED_USER_ENTITY".
*/
public class RegisteredUserEntityDao extends AbstractDao<RegisteredUserEntity, Long> {

    public static final String TABLENAME = "REGISTERED_USER_ENTITY";

    /**
     * Properties of entity RegisteredUserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RegisterUserId = new Property(0, long.class, "registerUserId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Head = new Property(6, String.class, "head", false, "HEAD");
        public final static Property CreatedTime = new Property(7, java.util.Date.class, "createdTime", false, "CREATED_TIME");
    }


    public RegisteredUserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RegisteredUserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGISTERED_USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: registerUserId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"PHONE\" TEXT," + // 3: phone
                "\"PASSWORD\" TEXT," + // 4: password
                "\"SEX\" TEXT," + // 5: sex
                "\"HEAD\" TEXT," + // 6: head
                "\"CREATED_TIME\" INTEGER);"); // 7: createdTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_REGISTERED_USER_ENTITY__id ON \"REGISTERED_USER_ENTITY\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGISTERED_USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegisteredUserEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRegisterUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(7, head);
        }
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(8, createdTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegisteredUserEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRegisterUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(7, head);
        }
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(8, createdTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RegisteredUserEntity readEntity(Cursor cursor, int offset) {
        RegisteredUserEntity entity = new RegisteredUserEntity( //
            cursor.getLong(offset + 0), // registerUserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // head
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // createdTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegisteredUserEntity entity, int offset) {
        entity.setRegisterUserId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegisteredUserEntity entity, long rowId) {
        entity.setRegisterUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegisteredUserEntity entity) {
        if(entity != null) {
            return entity.getRegisterUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegisteredUserEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
