package com.example.qmread.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.qmread.bean.BookEntity;
import com.example.qmread.bean.ChapterEntity;
import com.example.qmread.bean.RegisteredUserEntity;

import com.example.qmread.bean.CommentsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENTS_ENTITY".
*/
public class CommentsEntityDao extends AbstractDao<CommentsEntity, Long> {

    public static final String TABLENAME = "COMMENTS_ENTITY";

    /**
     * Properties of entity CommentsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property RegisterId = new Property(1, long.class, "registerId", false, "REGISTER_ID");
        public final static Property BookId = new Property(2, long.class, "bookId", false, "BOOK_ID");
        public final static Property ChapterId = new Property(3, long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property CreatedTime = new Property(4, java.util.Date.class, "createdTime", false, "CREATED_TIME");
        public final static Property Detail = new Property(5, String.class, "detail", false, "DETAIL");
        public final static Property Current = new Property(6, Integer.class, "current", false, "CURRENT");
    }

    private DaoSession daoSession;


    public CommentsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CommentsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENTS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"REGISTER_ID\" INTEGER NOT NULL ," + // 1: registerId
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 3: chapterId
                "\"CREATED_TIME\" INTEGER," + // 4: createdTime
                "\"DETAIL\" TEXT," + // 5: detail
                "\"CURRENT\" INTEGER);"); // 6: current
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_COMMENTS_ENTITY__id ON \"COMMENTS_ENTITY\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENTS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommentsEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRegisterId());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getChapterId());
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(5, createdTime.getTime());
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(6, detail);
        }
 
        Integer current = entity.getCurrent();
        if (current != null) {
            stmt.bindLong(7, current);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommentsEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRegisterId());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getChapterId());
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(5, createdTime.getTime());
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(6, detail);
        }
 
        Integer current = entity.getCurrent();
        if (current != null) {
            stmt.bindLong(7, current);
        }
    }

    @Override
    protected final void attachEntity(CommentsEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CommentsEntity readEntity(Cursor cursor, int offset) {
        CommentsEntity entity = new CommentsEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // registerId
            cursor.getLong(offset + 2), // bookId
            cursor.getLong(offset + 3), // chapterId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // detail
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // current
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommentsEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRegisterId(cursor.getLong(offset + 1));
        entity.setBookId(cursor.getLong(offset + 2));
        entity.setChapterId(cursor.getLong(offset + 3));
        entity.setCreatedTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDetail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurrent(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommentsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommentsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommentsEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegisteredUserEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBookEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getChapterEntityDao().getAllColumns());
            builder.append(" FROM COMMENTS_ENTITY T");
            builder.append(" LEFT JOIN REGISTERED_USER_ENTITY T0 ON T.\"REGISTER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN BOOK_ENTITY T1 ON T.\"BOOK_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN CHAPTER_ENTITY T2 ON T.\"CHAPTER_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CommentsEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        CommentsEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RegisteredUserEntity userEntity = loadCurrentOther(daoSession.getRegisteredUserEntityDao(), cursor, offset);
         if(userEntity != null) {
            entity.setUserEntity(userEntity);
        }
        offset += daoSession.getRegisteredUserEntityDao().getAllColumns().length;

        BookEntity bookEntity = loadCurrentOther(daoSession.getBookEntityDao(), cursor, offset);
         if(bookEntity != null) {
            entity.setBookEntity(bookEntity);
        }
        offset += daoSession.getBookEntityDao().getAllColumns().length;

        ChapterEntity chapterEntity = loadCurrentOther(daoSession.getChapterEntityDao(), cursor, offset);
         if(chapterEntity != null) {
            entity.setChapterEntity(chapterEntity);
        }

        return entity;    
    }

    public CommentsEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CommentsEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CommentsEntity> list = new ArrayList<CommentsEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CommentsEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CommentsEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
